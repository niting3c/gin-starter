// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "starter/internal/app/models"

	mock "github.com/stretchr/testify/mock"

	utils "starter/internal/app/utils"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user *models.User) (*models.User, *utils.ErrorMessage) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.User
	var r1 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, *utils.ErrorMessage)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) *utils.ErrorMessage); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ErrorMessage)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: emailId
func (_m *UserRepository) Delete(emailId string) *utils.ErrorMessage {
	ret := _m.Called(emailId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(string) *utils.ErrorMessage); ok {
		r0 = rf(emailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ErrorMessage)
		}
	}

	return r0
}

// Get provides a mock function with given fields: emailId
func (_m *UserRepository) Get(emailId string) (*models.User, *utils.ErrorMessage) {
	ret := _m.Called(emailId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.User
	var r1 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(string) (*models.User, *utils.ErrorMessage)); ok {
		return rf(emailId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(emailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *utils.ErrorMessage); ok {
		r1 = rf(emailId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ErrorMessage)
		}
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepository) GetUserByID(id int64) (*models.User, *utils.ErrorMessage) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(int64) (*models.User, *utils.ErrorMessage)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *utils.ErrorMessage); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ErrorMessage)
		}
	}

	return r0, r1
}

// ListAllUsers provides a mock function with given fields:
func (_m *UserRepository) ListAllUsers() ([]interface{}, *utils.ErrorMessage) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListAllUsers")
	}

	var r0 []interface{}
	var r1 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func() ([]interface{}, *utils.ErrorMessage)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() *utils.ErrorMessage); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ErrorMessage)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: email, hashedPass, salt
func (_m *UserRepository) UpdatePassword(email string, hashedPass string, salt string) *utils.ErrorMessage {
	ret := _m.Called(email, hashedPass, salt)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(string, string, string) *utils.ErrorMessage); ok {
		r0 = rf(email, hashedPass, salt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ErrorMessage)
		}
	}

	return r0
}

// UpdateUserSelfDetails provides a mock function with given fields: currentEmail, user
func (_m *UserRepository) UpdateUserSelfDetails(currentEmail string, user *models.User) *utils.ErrorMessage {
	ret := _m.Called(currentEmail, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSelfDetails")
	}

	var r0 *utils.ErrorMessage
	if rf, ok := ret.Get(0).(func(string, *models.User) *utils.ErrorMessage); ok {
		r0 = rf(currentEmail, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ErrorMessage)
		}
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
